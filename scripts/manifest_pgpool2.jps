type: install
version: 1.7
id: pgpool2-node
name: Pgpool II Node 

baseUrl: https://raw.githubusercontent.com/jelastic-jps/postgres-multiregion/master

globals:
  vpnAppid: ${settings.vpnAppid}

nodes:
  cloudlets: 16
  scalingMode: STATELESS
  nodeType: pgpool2
  nodeGroup: extra
  cluster: false
  validation:
    maxCount: 1

onBeforeMigrate:
  stopEvent:
    type: warning
    message: Migration is not supported for multiregion cluster.

onBeforeRemoveNode[extra]:
  - if ('${event.params.name}' == 'Pgpool-II'):
      stopEvent:
        type: warning
        message: Scaling is not supported for multiregion cluster.

onBeforeAddNode[extra]:
  - if ('${event.params.name}' == 'Pgpool-II'):
      stopEvent:
        type: warning
        message: Scaling is not supported for multiregion cluster.

onInstall:
  - cmd[extra]: |-
      jem service stop
      echo -e "\n"|ssh-keygen -t rsa -N ""
  - cmd[extra]: cat /var/lib/pgsql/.ssh/id_rsa.pub
    user: root
  - script: |-
      var regions = '${settings.regions}'.split(','), publicKeyCmd, pg_hba_string = "", pg_hba_comand = "";
      for (var cluster = 1, n = regions.length + 1; cluster < n; cluster++) {
          var resp = jelastic.env.control.GetEnvInfo('${settings.mainEnvName}-' + cluster, session);
          if (resp.result == 0) {
              pg_hba_string = "1i host    all             pgpool          " + '${nodes.extra.master.address}' + "/32         md5";
              pg_hba_comand = 'grep -q ' + '${nodes.extra.master.address}' + ' /var/lib/pgsql/data/pg_hba.conf || sed -ci -e \'' + pg_hba_string + '\' /var/lib/pgsql/data/pg_hba.conf';    
              publicKeyCmd = 'echo \'${response.out}\' >> /var/lib/pgsql/.ssh/authorized_keys';
              var resp = jelastic.env.control.ExecCmdByGroup('${settings.mainEnvName}-' + cluster, session, 'sqldb', toJSON([{ "command": publicKeyCmd, "params": "" }]), false, false, "root");
              if (resp.result != 0) return resp;
              var resp = jelastic.env.control.ExecCmdByGroup('${settings.mainEnvName}-' + cluster, session, 'sqldb', toJSON([{ "command": pg_hba_comand, "params": "" }]), false, false, "root");
              if (resp.result != 0) return resp;
          }
      }
      return { result: 0 };
  - cmd[extra]: |-
      sed -ci -e "s/^sr_check_password.*/sr_check_password = '${settings.password}'/" /etc/pgpool-II/pgpool.conf
      sed -ci -e "s/^health_check_password.*/health_check_password = '${settings.password}'/" /etc/pgpool-II/pgpool.conf
      [ -f ~/.pgpoolkey ] || echo 'defaultpgpoolkey' > ~/.pgpoolkey; chmod 600 ~/.pgpoolkey
      chown -R postgres:postgres /etc/pgpool-II
    user: root
  - cmd[extra]: |-
      [ -f ~/.pgpoolkey ] || echo 'defaultpgpoolkey' > ~/.pgpoolkey; chmod 600 ~/.pgpoolkey
      pg_enc -m -f /etc/pgpool-II/pgpool.conf -u pgpool ${settings.password}
      sed -ci -e "s/^sr_check_password.*/sr_check_password = '${settings.password}'/" /etc/pgpool-II/pgpool.conf
      sed -ci -e "s/^health_check_password.*/health_check_password = '${settings.password}'/" /etc/pgpool-II/pgpool.conf
      pg_enc -m -f /etc/pgpool-II/pgpool.conf -u webadmin ${settings.password}
  - if ('${settings.internalNetworkEnabled}' == 'true' ):
    - if (!/vpnAppid/.test("${globals.vpnAppid}")):
      - install: ${baseUrl}/scripts/networkAddon.yml
        nodeGroup: extra
        settings:
          vpnAppid: ${globals.vpnAppid}

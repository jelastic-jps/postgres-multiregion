type: update
id: postgres-primary-secondary-multiregion-auto-cluster
logo: /images/postgres-70x70.png
name: PostgreSQL Primary-Secondary Multiregion Auto-Cluster

baseUrl: https://raw.githubusercontent.com/jelastic-jps/postgres-multiregion/master

targetNodes:
  nodeGroup: sqldb

onInstall:
  - script: scripts/getEnvNodes.js
  - init
  - script: |-
      var regions = '${settings.regions}'.split(','), onAfterReturn = { setGlobals: {} }, glbs = onAfterReturn.setGlobals, pgsqlIPs = [];
      for (var cluster = 1, n = regions.length + 1; cluster < n; cluster++) {
          var resp = jelastic.env.control.GetEnvInfo('${settings.mainEnvName}-' + cluster, session);
          if (resp.result == 0) {
              for (var i = 0, k = resp.nodes; i < k.length; i++) { pgsqlIPs.push(k[i].address); }
          }
      }
      glbs["pgAddrsses"] = pgsqlIPs;
      return { result: 0, onAfterReturn: onAfterReturn };
  - addPgNodesToPool

actions:
  init:
    - if (${settings.clone:false} || ${this.update:false}):
      - script: |-
          var regions = '${settings.regions}'.split(','), currentEnvName;
          for (var cluster = 1, n = regions.length + 1; cluster < n; cluster ++) {
              currentEnvName = '${settings.mainEnvName}-' + cluster;
              var resp = jelastic.env.control.AddContainerEnvVars({
                envName: currentEnvName,
                session: session,
                nodeGroup: "sqldb",
                vars: {
                  "PG_MASTER_IP": '${nodes.sqldb.master.address}'
                }
              });
          }
          return { result: 0 };
      - script: |-
          var regions = '${settings.pgpool2Regions}'.split(','), cleanCmd;
          for (var cluster = 1, n = regions.length + 1; cluster < n; cluster++) {
              var resp = jelastic.env.control.GetEnvInfo('${settings.mainEnvName}-pgpool2-' + cluster, session);
              if (resp.result == 0) {
                  cleanCmd = "jcm cleanupNodesFromPgpool2Conf &>> /var/log/run.log";
                  var resp = jelastic.env.control.ExecCmdByGroup('${settings.mainEnvName}-pgpool2-' + cluster, session, 'extra', toJSON([{ "command": cleanCmd, "params": "" }]), false, false, "postgres");
                  if (resp.result != 0) return resp;
              }
          }
          return { result: 0 };
      - cmd[${nodes.sqldb.master.id}]: jcm removeAllReplicaHosts
      - getPswd
      - forEach(globals.pgsqlEnvs):
          - if ('${@i}' != '${env.envName}'):
            - script: ${baseUrl}/scripts/updateConfigAfterClone.js
      - script: |-
          var regions = '${settings.regions}'.split(','),
              pgpool2Regions = '${settings.pgpool2Regions}'.split(','),
              pg_hba_string = "", pg_hba_comand = "", pgpoolIp = "", pgpoolPublicKey = "",
              deletePgpoolAddressCmd = "sed -ci -e '/^host[[:space:]]*all[[:space:]]*pgpool/d' /var/lib/pgsql/data/pg_hba.conf",
              deletePgPoolPublicKeys = "sed -ci -e '/pgpool2/d' /var/lib/pgsql/.ssh/authorized_keys",
              getPgPooolPublicKey = "cat /var/lib/pgsql/.ssh/id_rsa.pub",
              ipCmd = "ip a | grep -A1 venet0 | grep inet | awk '{print $2}'| sed 's|\/[0-9]*||g' | head -n 2|tail -n 1";
          for (var cluster = 1, n = regions.length + 1; cluster < n; cluster++) {
              var resp = jelastic.env.control.GetEnvInfo('${settings.mainEnvName}-' + cluster, session);
              if (resp.result == 0) {
                  var resp = jelastic.env.control.ExecCmdByGroup('${settings.mainEnvName}-' + cluster, session, 'sqldb', toJSON([{ "command": deletePgpoolAddressCmd, "params": "" }]), false, false, "root");
                  if (resp.result != 0) return resp;
                  resp = jelastic.env.control.ExecCmdByGroup('${settings.mainEnvName}-' + cluster, session, 'sqldb', toJSON([{ "command": deletePgPoolPublicKeys, "params": "" }]), false, false, "root");
                  if (resp.result != 0) return resp;
                  for (var pgpoolCluster = 1, nPgpool = pgpool2Regions.length + 1; pgpoolCluster < nPgpool; pgpoolCluster++) {
                      var resp = jelastic.env.control.GetEnvInfo('${settings.mainEnvName}-pgpool2-' + pgpoolCluster, session);
                      if (resp.result == 0) {
                          resp = jelastic.env.control.ExecCmdByGroup('${settings.mainEnvName}-pgpool2-' + pgpoolCluster, session, 'extra', toJSON([{ "command": ipCmd, "params": "" }]), false, false, "root");
                          if (resp.result != 0) { return resp; } else { pgpoolIp = resp.responses[0].out; }
                          pg_hba_string = "1i host    all             pgpool          " + pgpoolIp + "/32         md5";
                          pg_hba_comand = 'grep -q ' + pgpoolIp + ' /var/lib/pgsql/data/pg_hba.conf || sed -ci -e \'' + pg_hba_string + '\' /var/lib/pgsql/data/pg_hba.conf'; 
                          resp = jelastic.env.control.ExecCmdByGroup('${settings.mainEnvName}-' + cluster, session, 'sqldb', toJSON([{ "command": pg_hba_comand, "params": "" }]), false, false, "root");
                          if (resp.result != 0) return resp;
                          resp = jelastic.env.control.ExecCmdByGroup('${settings.mainEnvName}-pgpool2-' + pgpoolCluster, session, 'extra', toJSON([{ "command": getPgPooolPublicKey, "params": "" }]), false, false, "root");
                          if (resp.result != 0) { return resp; } else { pgpoolPublicKey = resp.responses[0].out; }
                          insertPgpoolPublicKeyCmd = 'echo ' + pgpoolPublicKey + ' >> /var/lib/pgsql/.ssh/authorized_keys';
                          resp = jelastic.env.control.ExecCmdByGroup('${settings.mainEnvName}-' + cluster, session, 'sqldb', toJSON([{ "command": insertPgpoolPublicKeyCmd, "params": "" }]), false, false, "root");
                          if (resp.result != 0) return resp;
                      }
                  }
              }
          }
          return { result: 0 };
      - addSecondaries
      - script: |-
          var regions = '${settings.regions}'.split(','),
          pgpool2Regions = '${settings.pgpool2Regions}'.split(',');
          for (var cluster = 1, n = regions.length + 1; cluster < n; cluster++) {
              var resp = jelastic.env.control.GetEnvInfo('${settings.mainEnvName}-' + cluster, session);
              if (resp.result == 0) {
                  resp = jelastic.env.control.ExecCmdByGroup('${settings.mainEnvName}-' + cluster, session, 'sqldb', toJSON([{ "command": "jem service restart", "params": "" }]), false, false, "root");
                  if (resp.result != 0) return resp;
              }
          }
          for (var pgpoolCluster = 1, nPgpool = pgpool2Regions.length + 1; pgpoolCluster < nPgpool; pgpoolCluster++) {
              resp = jelastic.env.control.GetEnvInfo('${settings.mainEnvName}-pgpool2-' + pgpoolCluster, session);
              if (resp.result == 0) {
              resp = jelastic.env.control.ExecCmdByGroup('${settings.mainEnvName}-pgpool2-' + pgpoolCluster, session, 'extra', toJSON([{ "command": "jem service restart", "params": "" }]), false, false, "root");
                  if (resp.result != 0) { return resp; }
              }
          }
          return { result: 0 };
    - else:
      - getPswd
      - forEach(globals.pgsqlEnvs):
          - if ('${@i}' != '${env.envName}'): 
            - script: ${baseUrl}/scripts/getSecondaryNodeParam.js
            - initSecondary: 
                id: ${response.secondaryNodeId}
                ip: ${response.secondaryNodeIp}
                domain: ${@i}
            - script: |-
                resp = jelastic.env.control.ExecCmdByGroup('${@i}', session, 'sqldb', toJSON([{ "command": "jem service restart", "params": "" }]), false, false, "root");
                return resp;
      - addSecondaries
      - install: ${baseUrl}/scripts/cloningAddon.yml
        envName: '${settings.mainEnvName}-1'
        settings:
          nodeGroup: sqldb
          regions: "${settings.regions}"
          pgpool2Regions: "${settings.pgpool2Regions}"
          mainEnvName: "${settings.mainEnvName}"
    - fixConnInfo

  addSecondaries:
    - forEach(globals.pgsqlEnvs):
        - if ('${@i}' != '${env.envName}'):
          - script: ${baseUrl}/scripts/getSecondaryNodeParam.js
          - addSlavesToHbaConf:
              ip: ${response.secondaryNodeIp}

  initSecondary:
    - cmd[${nodes.sqldb.master.id}]: |-
        jcm addReplicaHost ${this.ip} &>> /var/log/run.log
        sudo jem service restart
    - cmd[${nodes.sqldb.master.id}]: |-
        sudo jem service restart
    - script: |-
        initSecondaryCmd = "jcm initSecondary &>> /var/log/run.log; jcm updateHbaConf ${globals.pgsqlAddresses} ${this.ip}; chown -R postgres:postgres /var/lib/pgsql/data; jem service restart";
        resp = jelastic.env.control.ExecCmdById('${this.domain}', session, ${this.id}, toJSON([{ "command": initSecondaryCmd, "params": "" }]), false, "root");
        return resp;
        
  addSlavesToHbaConf:
    - script: |-
        var regions = '${settings.regions}'.split(','), currentPgNodeIp,
            pg_hba_string = "1i host replication  replication       ${this.ip}/32    trust",
            ipCmd = "ip a | grep -A1 venet0 | grep inet | awk '{print $2}'| sed 's|\/[0-9]*||g' | head -n 2|tail -n 1",
            pg_hba_comand = 'grep -q ${this.ip} /var/lib/pgsql/data/pg_hba.conf || sed -ci -e \'' + pg_hba_string + '\' /var/lib/pgsql/data/pg_hba.conf';
        for (var cluster = 1, n = regions.length + 1; cluster < n; cluster++) {
            currentPgNodeIp = jelastic.env.control.ExecCmdByGroup('${settings.mainEnvName}-' + cluster, session, 'sqldb', toJSON([{ "command": ipCmd, "params": "" }]), false, false, "root");
            if (currentPgNodeIp.result != 0) return currentPgNodeIp;
            if (currentPgNodeIp.responses[0].out != '${this.ip}') {
                resp = jelastic.env.control.ExecCmdByGroup('${settings.mainEnvName}-' + cluster, session, 'sqldb', toJSON([{ "command": pg_hba_comand, "params": "" }]), false, false, "root");
                if (resp.result != 0) return resp;
            }
        }
        return { result: 0 };
        
  fixConnInfo:
    - script: |-
        var regions = '${settings.regions}'.split(',');
        for (var cluster = 2, n = regions.length + 1; cluster < n; cluster++) {
            var resp = jelastic.env.control.GetEnvInfo('${settings.mainEnvName}-' + cluster, session);
            if (resp.result != 0) return resp;
            var serverNumber = cluster - 1;
            var adjustConinfoCmd = "sed -ci -e 's/port=5432 user=replication/port=5432 user=replication application_name=server" + serverNumber + "/g' /var/lib/pgsql/data/postgresql.conf";
            var resp = jelastic.env.control.ExecCmdByGroup('${settings.mainEnvName}-' + cluster, session, 'sqldb', toJSON([{
                "command": adjustConinfoCmd,
                "params": ""
            }]), false, false, "postgres");
        if (resp.result != 0) return resp; }
        return { result: 0 };

  addPgNodesToPool:
    - forEach(globals.pgAddrsses):
        - script: |-
            var regions = '${settings.pgpool2Regions}'.split(','), addCmd;
            for (var cluster = 1, n = regions.length + 1; cluster < n; cluster++) {
                var resp = jelastic.env.control.GetEnvInfo('${settings.mainEnvName}-pgpool2-' + cluster, session);
                if (resp.result == 0) {
                    resetFailedCmd = "systemctl reset-failed pgpool-II.service; service pgpool-II start";
                    var resp = jelastic.env.control.ExecCmdByGroup('${settings.mainEnvName}-pgpool2-' + cluster, session, 'extra', toJSON([{ "command": resetFailedCmd, "params": "" }]), false, false, "root");
                    if (resp.result != 0) return resp;
                    addCmd = "jcm addPgNodeToPgpool2Conf " + '${@i}' + " &>> /var/log/run.log";
                    resp = jelastic.env.control.ExecCmdByGroup('${settings.mainEnvName}-pgpool2-' + cluster, session, 'extra', toJSON([{ "command": addCmd, "params": "" }]), false, false, "postgres");
                    if (resp.result != 0) return resp;
                }
            }
            return { result: 0 };
    - script: |-
        var regions = '${settings.pgpool2Regions}'.split(','), enableWatchdogCmd, addNodeCmd, pgpoolNodeIp;
        for (var cluster = 1, n = regions.length + 1; cluster < n; cluster++) {
            var resp = jelastic.env.control.GetEnvInfo('${settings.mainEnvName}-pgpool2-' + cluster, session);
            if (resp.result == 0) {
                if ( regions.length > 1 ) {
                    for (var node = 1, n = regions.length + 1; node < n; node++) {
                        var resp = jelastic.env.control.GetEnvInfo('${settings.mainEnvName}-pgpool2-' + node, session);
                        if (resp.result != 0) { return resp; }
                        pgpoolNodeIp = resp.nodes[0].address;
                        addNodeCmd = "jcm addWatchdogConfig " + node + " " + pgpoolNodeIp;
                        var resp = jelastic.env.control.ExecCmdByGroup('${settings.mainEnvName}-pgpool2-' + cluster, session, 'extra', toJSON([{ "command": addNodeCmd, "params": "" }]), false, false, "root");
                        if (resp.result != 0) return resp;
                    }
                    var resp = jelastic.env.control.ExecCmdByGroup('${settings.mainEnvName}-pgpool2-' + cluster, session, 'extra', toJSON([{ "command": "jcm enableWatchdog", "params": "" }]), false, false, "root");
                    if (resp.result != 0) return resp;
                }
                enableWatchdogCmd = "jcm setPgpoolNodeId " + cluster + "; chown -R postgres:postgres /etc/pgpool-II; jem service restart";
                var resp = jelastic.env.control.ExecCmdByGroup('${settings.mainEnvName}-pgpool2-' + cluster, session, 'extra', toJSON([{ "command": enableWatchdogCmd, "params": "" }]), false, false, "root");
                if (resp.result != 0) return resp;
            }
        }
        return { result: 0 };

  getPswd:
    - cmd[${nodes.sqldb.master.id}]: |-
        jcm initMaster &>> /var/log/run.log
        jcm getPswd
    - setGlobals: 
        password: ${response.out}

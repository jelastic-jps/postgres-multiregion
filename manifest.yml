type: install
jpsVersion: '1.8.1'
name: PostgreSQL Multi-Region Cluster
id: postgres-cluster-multiregions
categories:
  - apps/clusters
  - apps/databases
logo: /images/postgres-multiregion-logo.png
description: 
  text: Highly-available and reliable Postgres cluster setup with automatic multi-region distribution
  short: Enterprise-grade Postgres Cluster with automatic distribution across several regions
baseUrl: https://raw.githubusercontent.com/sych74/postgres-multiregion/master

onBeforeInit: scripts/onBeforeInit.js

globals:
  multiregional_utils: https://github.com/jelastic-jps/common/blob/main/multiregional-cluster-utils
  cluster_app: postgres
  password: ${fn.password(10)}
  pgpool2Regions: ""

settings:
  main:
    fields:
      - caption: Version
        name: nodeType
        type: list    
        values: 
          - value: postgres13
            caption: PostgreSQL 13
          - value: postgres14
            caption: PostgreSQL 14
          - value: postgres15
            caption: PostgreSQL 15
          - value: postgres16
            caption: PostgreSQL 16
          - value: postgres17
            caption: PostgreSQL 17
        default: postgres17
      - caption: Environment
        type: envname
        name: envName
        dependsOn: region
        randomName: true
        showFullDomain: false
        tooltip: Maximum length of environment name is 16 symbols
        required: true
      - type: checkbox
        caption: "Create separate environment group"
        name: envGroupEnabled
        value: true
      - caption: PostgreSQL Regions
        type: regionlist
        name: regions
        disableInactive: true
        selectFirstAvailable: false
        multiSelect: true
        min: 2
        max: 5
        filter:
          isActive: true
        tooltip: Select the destination regions for PostgreSQL nodes. The first selected region will host the primary node of cluster, so this region should have the highest performance. Other regions will host the secondary nodes.
        required: true
      - type: toggle
        caption: Pgpool-II enabled
        name: pgpoolEnabled
        value: false
        showIf:
          true:
            - caption: Pgpool-II regions
              type: regionlist
              name: pgpool2Regions
              disableInactive: true
              selectFirstAvailable: false
              multiSelect: true
              min: 1
              max: 5
              filter:
                isActive: true
              tooltip: Select the destination regions for the Pgpool II nodes. The first selected region will host the main (managing) Pgpool II node, other regions will host the standby nodes.
              required: true

mixins:
  - https://github.com/jelastic-jps/common/blob/main/multiregional-cluster-utils/multiregion-globals-common.yml
  - https://github.com/jelastic-jps/common/blob/main/multiregional-cluster-utils/multiregion-db-common.yml

actions:
  createPgpool2Envs:
  - script: |
      var regions = '${settings.pgpool2Regions}'.split(','), actions = [];
      var envGroups = eval('(' + MANIFEST + ')').envGroups;
      for (var cluster = 1, n = regions.length + 1; cluster < n; cluster ++) {
        actions.push({
          jps: "${baseUrl}/scripts/manifest_pgpool2.jps?_r=${fn.random}",
          envName: "${settings.envName}-pgpool2-" + cluster,
          loggerName: "${settings.envName}-pgpool2-" + cluster,
          envGroups: envGroups,
          displayName: "Pgpool-II node " + cluster ,
          region: "${globals.pgpoolRegion-" + cluster + "}",
          settings: {
            nodeType: "pgpool2",
            password: "${globals.password}",
            regions: "${settings.regions}",
            mainEnvName: "${settings.envName}"
          }
        });
      }
      return { result: 0, onAfterReturn: { 'marketplace.jps.install': actions } };

  attachNodeGroups:
    - script: |
        var postgresEnvGroup = 'Postgres cluster ' + '${settings.envName}';
        var postgresEnvs = '${globals.DBEnvs}';
        var targetEnvGroups = eval('(' + MANIFEST + ')').envGroups;
        if (!Array.isArray(targetEnvGroups)) {
            targetEnvGroupsString = targetEnvGroups.toString();
            targetEnvGroups = [];
            if(targetEnvGroupsString.length != 0) {
                targetEnvGroups.push(targetEnvGroupsString);
            }
        }
        targetEnvGroups.push(postgresEnvGroup);
        var DBEnvs = '${globals.DBEnvs}'.split(',');
        for (var i = 0, n = DBEnvs.length; i < n; i ++) {
            resp = jelastic.env.control.AttachEnvGroup({
              envName  : DBEnvs[i],
              session  : session,
              envGroups: targetEnvGroups
            });
            if (resp.result != 0) { return resp; }
        }
        if ('${settings.pgpoolEnabled}' == 'true' ) {
            var Pgpool2Envs = '${globals.Pgpool2Envs}'.split(',');
            for (var i = 0, n = Pgpool2Envs.length; i < n; i ++) {
                resp = jelastic.env.control.AttachEnvGroup({
                  envName  : Pgpool2Envs[i],
                  session  : session,
                  envGroups: targetEnvGroups
                });
                if (resp.result != 0) { return resp; }
            }
        }
        return { result: 0 }

onInstall:
  - initGlobals
  - setGlobals:
      domain: ${settings.envName}-1.${globals.domain-1}
  - createEnvs
  - script: ${globals.multiregional_utils}/get-cluster-envs.js
    envName: ${settings.envName}-1
  - setGlobals:
      DBEnvs: ${response.items.join(,)} 
  - if (${settings.pgpoolEnabled:false}):
    - createPgpool2Envs
    - setGlobals:
        pgpool2Regions: ${settings.pgpool2Regions}
  - script: ${globals.multiregional_utils}/get-cluster-envs.js
    envName: ${settings.envName}-pgpool2-1
  - setGlobals:
      Pgpool2Envs: ${response.items.join(,)}
  - if ('${settings.envGroupEnabled}' == 'true'):
    - attachNodeGroups
  - script: |-
      var onAfterReturn = { setGlobals: {} }, pgsqlEnvs = [], glbs = onAfterReturn.setGlobals;
      var resp = jelastic.env.control.GetEnvInfo('${settings.envName}-1', session);
      var ipCmd = "ip a | grep -A1 venet0 | grep inet | awk '{print $2}'| sed 's|\/[0-9]*||g' | head -n 2|tail -n 1";
      if (resp.result != 0) { return resp; } else { pgsqlEnvs.push(resp.env.shortdomain); }
      for (var i = 0, k = resp.nodes; i < k.length; i++) {
          if (k[i].nodeGroup == 'sqldb') {
              if( k[i].ismaster ) {
                  glbs["master_id_sqldb-1"] = k[i].id;
                  glbs["master_address_sqldb-1"] = k[i].address;
              }
          }
      }
      return { result: 0, onAfterReturn: onAfterReturn };
  - if (${settings.pgpoolEnabled:false}):
      - script: |-
          var onAfterReturn = { setGlobals: {} }, glbs = onAfterReturn.setGlobals;
          var resp = jelastic.env.control.GetEnvInfo('${settings.envName}-pgpool2-1', session);
          if (resp.result != 0) { return resp; }
          for (var i = 0, k = resp.nodes; i < k.length; i++) {
              if (k[i].nodeGroup == 'extra') {
                  if( k[i].ismaster ) {
                      glbs["master_id_pgpool-1"] = k[i].id;
                      glbs["master_address_pgpool-1"] = k[i].address;
                  }
              }
          }
          return { result: 0, onAfterReturn: onAfterReturn };
      - setGlobals:
          pgpoolDomain: ${settings.envName}-pgpool2-1.${globals.domain-1}
  - script: |-
      var regions = '${settings.regions}'.split(','), currentEnvName,
          replaceCmd = "sed -ci -e 's|MASTER_IP|PG_MASTER_IP|g' /usr/local/sbin/jcm"
      for (var cluster = 1, n = regions.length + 1; cluster < n; cluster ++) {
          currentEnvName = '${settings.envName}-' + cluster;
          resp = jelastic.env.control.AddContainerEnvVars({
            envName: currentEnvName,
            session: session,
            nodeGroup: "sqldb",
            vars: {
              "PG_MASTER_IP": '${globals.master_address_sqldb-1}'
            }
          });
         if (resp.result != 0) { return resp; }
         resp = jelastic.env.control.ExecCmdByGroup(currentEnvName, session, "sqldb", toJSON([{
            "command": replaceCmd,
            "params": ""
         }]), false, false, "root");
         if (resp.result != 0) { return resp; }
      }
      return { result: 0 }
  - installClusterLogic
  - if (${settings.pgpoolEnabled:false}):
    - setGlobals:
        successPath: /text/success-pgpool.md?_r=${fn.random}
  - else:
    - setGlobals:
        successPath: /text/success.md?_r=${fn.random}

startPage: https://node${globals.master_id_sqldb-1}-${globals.domain}/
success:
  email: ${globals.successPath}
  text: ${globals.successPath}
